import { apiFetch } from "@/config/ApiConnection"

export async function getAllFeedings() {
  try {
    const data = await apiFetch("/feedings")
    console.log(`‚úÖ getAllFeedings: ${data.length} alimenta√ß√µes encontradas`)
    return data
  } catch (error) {
    console.error("‚ùå Erro no getAllFeedings:", error)
    return []
  }
}

export async function getFeedingById(id) {
  try {
    const data = await apiFetch(`/feeding/${id}`)
    console.log(`‚úÖ getFeedingById: alimenta√ß√£o ${id} encontrada`)
    return data
  } catch (error) {
    console.error(`‚ùå Erro no getFeedingById: ${id}`, error)
    return null
  }
}

export async function createFeeding(feedingData) {
  try {
    // Log completo do payload antes do envio
    console.log("üì¶ Payload original recebido:", feedingData)

    // Verifica√ß√µes corretas para a API de alimenta√ß√£o
    if (
      !feedingData.nome ||
      !feedingData.tpAlimentacao ||
      typeof feedingData.quantidade !== "number" ||
      !feedingData.unidadeMedida ||
      !feedingData.grupoDestinado
    ) {
      console.warn("‚ö†Ô∏è Payload inv√°lido. Campos obrigat√≥rios:", {
        nome: feedingData.nome,
        tpAlimentacao: feedingData.tpAlimentacao,
        quantidade: feedingData.quantidade,
        unidadeMedida: feedingData.unidadeMedida,
        grupoDestinado: feedingData.grupoDestinado,
      })
      return { success: false, message: "Campos obrigat√≥rios n√£o preenchidos" }
    }

    // Garantir que a estrutura est√° exatamente como a API espera
    const payload = {
      nome: String(feedingData.nome).trim(),
      tpAlimentacao: String(feedingData.tpAlimentacao),
      quantidade: Number(feedingData.quantidade),
      unidadeMedida: String(feedingData.unidadeMedida),
      grupoDestinado: String(feedingData.grupoDestinado),
      frequencia: Number(feedingData.frequencia) || 1,
      desc: String(feedingData.desc || "").trim(),
    }

    console.log("üì§ Payload final enviado para /feeding:", payload)

    // Usar apiFetch que j√° tem o token configurado
    const data = await apiFetch("/feeding", {
      method: "POST",
      body: JSON.stringify(payload),
      headers: { "Content-Type": "application/json" },
    })

    console.log("‚úÖ createFeeding: alimenta√ß√£o criada com sucesso", data)
    return { success: true, data }
  } catch (error) {
    console.error("‚ùå Erro no createFeeding:", error)
    return { success: false, message: error.message || "Erro ao criar alimenta√ß√£o" }
  }
}

export async function updateFeeding(id, feedingData) {
  try {
    // Garantir que a estrutura est√° correta para update tamb√©m
    const payload = {
      nome: String(feedingData.nome).trim(),
      tpAlimentacao: String(feedingData.tpAlimentacao),
      quantidade: Number(feedingData.quantidade),
      unidadeMedida: String(feedingData.unidadeMedida),
      grupoDestinado: String(feedingData.grupoDestinado),
      frequencia: Number(feedingData.frequencia) || 1,
      desc: String(feedingData.desc || "").trim(),
    }

    console.log(`üì§ Payload para update ${id}:`, payload)

    const data = await apiFetch(`/feeding/${id}`, {
      method: "PUT",
      body: JSON.stringify(payload),
      headers: { "Content-Type": "application/json" },
    })
    console.log(`‚úÖ updateFeeding: alimenta√ß√£o ${id} atualizada`)
    return data
  } catch (error) {
    console.error(`‚ùå Erro no updateFeeding: ${id}`, error)
    return null
  }
}

export async function deleteFeeding(id) {
  try {
    await apiFetch(`/feeding/${id}`, { method: "DELETE" })
    console.log(`‚úÖ deleteFeeding: alimenta√ß√£o ${id} deletada`)
    return true
  } catch (error) {
    console.error(`‚ùå Erro no deleteFeeding: ${id}`, error)
    return false
  }
}
